<?

class Inc_Htmlutil{
			
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	
	
	
	public static function GravatarParam($email){
		$grav_param = md5(strtolower(trim($email)));
		return $grav_param;
	}	
	
	public static function GenerateGetTopWinScript($bypass=false){
		
		if(0){ ?><script><? } ?>
		function GetTopWin(findframe){
			if(typeof(findframe)!='undefined'){
				var reg = new RegExp(findframe);
				if(reg.test(location)){
					return window.self;
				}
			}
			<?
			$parse = parse_url($_SERVER['HTTP_REFERER']);
			if(preg_match('/act=facebook/',$_SERVER['HTTP_REFERER'])){
				$parse['host']= NULL;
			}
			if(preg_match('/act=member/',$_SERVER['HTTP_REFERER'])){
				$parse['host']= NULL;
			}
			if(!$bypass && $parse['host']==$_SERVER['SERVER_NAME']){
				?>
				if(window.parent===undefined)return window.self;
				if(window.parent==window.self)return window.self;
				return window.parent.GetTopWin();<?
			}else{
				?>
				return window.self;<?
			} ?>
		}
		<?if(0){ ?></script><? }
	}
	public static function htmlencode($content)
	{
	  	$content = str_replace(' ', "&nbsp;", $content);
	  	$content = str_replace('<', '&gt;',     $content);
	  	$content = str_replace('>', '&lt;',     $content);
	  	$content = str_replace('\n', "<br />",  $content);
	
	    return $content;
	}
	
	public static function htmlCleanJSON($content)
	{
		$content = str_replace("\\'", "&#039;", $content);
		$content = str_replace('\\"', '&quot;', $content);
	
		return $content;
	}
		
	function NormalizeForscript($text){
		$text = str_replace("\r\n",'\n',$text);
		$text = str_replace("\n",'\n',$text);
		$text = str_replace("'","\\'",$text);
		$text = str_replace('/',"\\/",$text);
		$text = preg_replace("/\\xE2\\x80\\xa8/","",$text);
		return $text;
	}	
			
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function forward($url,$time=-1){
		
		//FIX SessionCache
		Inc_SessionCache::Flush();
		//FIX SessionCache

		$url = str_replace("//index.php","/index.php",$url);
		//echo "<meta http-equiv=\"refresh\" content=\"$time;URL=$url\">";
		//ob_clean();
		//header("Location:$url");
		if(!headers_sent() && $time==-1){
			@header("Location:$url");
		}
		echo "<script>setTimeout(\"location='".$url."'\",".($time*1000).");</script>";
		exit();
	}
	
	public static function forwardWithPostParameter($url, $param=NULL, $time=-1){
		
		//FIX SessionCache
		Inc_SessionCache::Flush();
		//FIX SessionCache

		if($param==NULL){
			$param = $_POST;
		}	
		
		if($param==NULL && count($param)>0){
			foreach($param as $key=>$value){
				$param[$key] = urlencode($value);
			}

			$query_string = Inc_Var::pairArr2Str($param, "=", "&");
			if(preg_match("/\?/",$url)!==FALSE){
				$url = $url . "&" . $query_string;
			}else{
				$url = $url . "?" . $query_string;
			}
		}
		
		$url = str_replace("//index.php","/index.php",$url);
		
		
		if(!headers_sent() && $time==-1){
			@header("Location:$url");
		}
		echo "<script>setTimeout(\"location='".$url."'\",".($time*1000).");</script>";
		exit();
	}
	
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function javascriptRefreshParent(){
		echo '<script>window.opener.location.reload(true);</script>';
	}
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function javascriptCloseWindow(){
		echo '<script>window.close();</script>';
	}
	
	
	public static function NumberFormat($number,$decimal=2,$hide_ts=false){
		if($number==NULL)$number+=0;
		if(!is_numeric($number))return $number;
		
		return number_format($number,$decimal,'.',$hide_ts?"":",");
	}
	public static function NumberFormatIgnore0($number,$decimal=2,$hide_ts=false){
		if($number===0 || $number==NULL)return '';
		return self::NumberFormat($number,$decimal,$hide_ts);
	}	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function ParseCurrency($val,$showzero=false,$decimal=2) {
		if($val==NULL || $val=='')$val+=0;
		if(!is_numeric($val))return $val;
		if(isset($val) && $val >= 0 && $val != '') {
			if($showzero)
				return number_format($val,$decimal);
			else
				return ($val > 0) ? self::NumberFormat($val,$decimal) : " - ";
		}
		return " - ";
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function ParseName($firstname,$lastname=NULL) {
		if( (isset($firstname) && $firstname != "")  && (isset($lastname) && $lastname != "") ) {
			return ucwords(strtolower($firstname))." ".ucwords(strtolower($lastname));
		} else if( (isset($firstname) && $firstname != "") || (isset($lastname) && $lastname != "") ) {
			if((isset($firstname) && $firstname != "")) {
				return ucwords(strtolower($firstname));
			} else if((isset($lastname) && $lastname != "")) {
				return ucwords(strtolower($lastname));
			}
		}
		return " - ";
	}
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function ParseNumber($val,$showzero=false) {
		if(isset($val) && $val >= 0) {
			if($showzero)
				return $val;
			else
				return ($val > 0) ? $val : " - ";
		}
		return " - ";
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function MaskText($str,$pre=2,$suf=2,$txt='X'){
		$len = strlen($str);
		return substr($str,0,$pre).str_pad("",$len-$pre-$suf,$txt).substr($str,$len-$suf,$suf);
	}
	
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function clickable($url){
		$url                                    =    str_replace("\\r","\r",$url);
		$url                                    =    str_replace("\\n","\n<br/>",$url);
		$url                                    =    str_replace("\\n\\r","\n\r",$url);
		$url                                    =    str_replace("\r\n","<br/>",$url);
		$url                                    =    str_replace("\n","<br/>",$url);
		$url                                    =    str_replace("<br/>","\n<br/>\n",$url);
	
		
		
		$url = str_replace("redirect=https%3A%2F%2Fwww","redirect=hXttps%3A%2F%2FwXww",$url);
		$url = str_replace("redirect=http%3A%2F%2Fwww","redirect=hXttp%3A%2F%2FwXww",$url);
	
		
		$in=array(
		'`((?:https?|ftp)://\S+[[:alnum:]]/?)`si',
		'`((?<!//)(www\.\S+[[:alnum:]]/?))`si'
		);
		$out=array(
		'<a href="$1">$1</a> ',
		'<a href="http://$1">$1</a>'
		);
		$url = preg_replace($in,$out,$url);
		
		
		$url = str_replace("hXttp","http",$url);
		$url = str_replace("wXww","www",$url);
		//*/
		
		return $url;
	}
	
	
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function rewriteHtml($html){
		$html = preg_replace('/<!\-\-.+?\-\->/s','',$html);
		//$html = preg_replace('/>[\r\n \t]+</','><',$html);
		return $html;
	}
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function FlushOB($msg=NULL,$force_flush=FALSE){
	
		if(!Conf()->DEBUG && !$force_flush) return;
		echo $msg;
		while (ob_get_contents()) {
			ob_end_flush();
			ob_flush();
			flush();
		}
		if(!Conf()->IMPLICIT_FLUSH){
			ob_start();
		}
	}
	
	public static function ForceFlushOB(){
		self::FlushOB(NULL,true);
	}
	
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function JSWrite($text){
		$text = str_replace("\r\n",'\n',$text);
		$text = str_replace("\n",'\n',$text);
		$text = str_replace("'","\\'",$text);
		$text = str_replace('/',"\\/",$text);
		echo "document.write('".$text."');";
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	
	public static function htmltrim($html){
		$htmltrim = self::CleanHTML($html);
		$htmltrim = str_replace("\r\n","",$htmltrim);
		$htmltrim = str_replace("\n","",$htmltrim);
		return $htmltrim;
	}
	
	public static function CleanHTML($html){
		//Inc_Var::vardump($html);
		$html = str_replace("\r\n","\n",$html);
		$html = preg_replace("/<br[ ]*\/?>/","\n",$html);
		$html = preg_replace("/<head.+<\/head>/s","",$html);
		$html = preg_replace("/<a.+?href=(\"|')(.+?)(\"|').*?>.+?<\/a>/si","\n$2\n",$html);
		$html = preg_replace("/<.+?\/>/si","",$html);
		$html = preg_replace("/<.+?>/si","",$html);
		$html = preg_replace("/<\/.+?>/si","",$html);
		$html = preg_replace("/^^[\t\n ]+/s","",$html);
	
	
		///*/
		
		return $html;
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//

	
	public static function auto_version($file)
	{
		$pfile  = $file;
		if(!file_exists($pfile))
		return $file;
	
		$mtime = filemtime($pfile);
		return preg_replace('{\\.([^./]+)$}', ".$mtime.\$1", $file);
	}
	
	
	public static function format_bytes($size) {
		$units = array(' B', ' KB', ' MB', ' GB', ' TB');
		for ($i = 0; $size >= 1024 && $i < 4; $i++) $size /= 1024;
		return round($size, 2).$units[$i];
	}

	public static function sec2hms ($sec, $padHours = false) 
	  {

	    // start with a blank string
	    $hms = "";
	    
	    // do the hours first: there are 3600 seconds in an hour, so if we divide
	    // the total number of seconds by 3600 and throw away the remainder, we're
	    // left with the number of hours in those seconds
	   
	    $hours = intval(intval($sec) / 3600); 
	    if ( $hours>0) {

	        // add hours to $hms (with a leading 0 if asked for)
	        $hms .= ($padHours) 
	              ? str_pad($hours, 2, "0", STR_PAD_LEFT). ":"
	              : $hours. "hour :";
	    
	       
	    }

	    
	    // dividing the total seconds by 60 will give us the number of minutes
	    // in total, but we're interested in *minutes past the hour* and to get
	    // this, we have to divide by 60 again and then use the remainder
	    $minutes = intval(($sec / 60) % 60); 

	    // add minutes to $hms (with a leading 0 if needed)
	    $hms .= str_pad($minutes, 2, "0", STR_PAD_LEFT). "min :";

	    // seconds past the minute are found by dividing the total number of seconds
	    // by 60 and using the remainder
	    $seconds = intval($sec % 60); 

	    // add seconds to $hms (with a leading 0 if needed)
	    $hms .= str_pad($seconds, 2, "0", STR_PAD_LEFT). "sec";

	    // done!
	    return $hms;
	    
	  }
	
		
}