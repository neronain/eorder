<?

class Inc_Server{
			
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	
	
	public static function set_minimum_time_limit($sec)
	{
	
		
	}
	
	public static function is_https()
	{
	
		return $_SERVER["SERVER_PORT"]==443;
	} 
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	
	function ctrl_getIPaddress(){
		if (getenv(HTTP_X_FORWARDED_FOR))
			$ip=getenv(HTTP_X_FORWARDED_FOR);
		else
			$ip=getenv(REMOTE_ADDR);
		return $ip;
	}	
	
	public static function real_ip(){

	if (isset($_SERVER))
	{
		if (isset($_SERVER["HTTP_X_FORWARDED_FOR"]))
		{
			$arr = explode(',', $_SERVER["HTTP_X_FORWARDED_FOR"]);

            
            foreach ($arr AS $ip)
            {
                $ip = trim($ip);

                if ($ip != 'unknown')
                {
                    $realip = $ip;
					return $realip;
                }
            }
			
		}
		
		if (isset($_SERVER["HTTP_X_CLUSTER_CLIENT_IP"]))
		{
			return $_SERVER["HTTP_X_CLUSTER_CLIENT_IP"];
		}
		else if (isset($_SERVER["HTTP_CLIENT_IP"]))
		{
			return $_SERVER["HTTP_CLIENT_IP"];
		}
		else
		{
			return $_SERVER['REMOTE_ADDR'];
		}
	}
	else
	{
		if (getenv('HTTP_X_FORWARDED_FOR'))
		{
			return getenv('HTTP_X_FORWARDED_FOR');
		}
		else if (getenv('HTTP_X_CLUSTER_CLIENT_IP'))
		{
			return getenv('HTTP_X_CLUSTER_CLIENT_IP');
		}
		else if (getenv('HTTP_CLIENT_IP'))
		{
			return getenv('HTTP_CLIENT_IP');
		}
		else
		{
			return getenv('REMOTE_ADDR');
		}
	}

	return NULL;
}
	
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function ipaccess($ip, $accesslist) {
	    return preg_match("/^(".str_replace(array("\r\n", ' '), array('|', ''), preg_quote($accesslist, '/')).")/", $ip);
	}
	
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function serverSSLCall($fullurl,$post_string){
		global $g_config;
		
		$url_parsed=parse_url($fullurl);
		//var_dump($url_parsed);
		$contents = "";
		$sock = fsockopen("ssl://".$url_parsed[host],$url_parsed[port],$err_num,$err_str,30); 
		if (!$sock) {
			return FALSE;
		}
		fputs($sock, "POST $url_parsed[path] HTTP/1.1\r\n"); 
		fputs($sock, "Host: $url_parsed[host]\r\n"); 
		fputs($sock, "Content-type: application/x-www-form-urlencoded\r\n"); 
		fputs($sock, "Content-length: ".strlen($post_string)."\r\n"); 
		fputs($sock, "Connection: close\r\n\r\n"); 
		fputs($sock, $post_string . "\r\n\r\n"); 
		
		while(!feof($sock)) {
			$contents .= fgets($sock);
		}
		fclose($sock); 
	
		return $contents;
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function AutoUnchunk($contents){
		$data = explode("\r\n\r\n",$contents);
		if (preg_match("/Transfer-Encoding: chunked/", $data[0], $matches)) {
			return Inc_Server::unchunkHttp11($data[1]);
		}
		return $data[1];
	}
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function unchunkHttp11($data) {
	    $fp = 0;
	    $outData = "";
	    while ($fp < strlen($data)) {
	        $rawnum = substr($data, $fp, strpos(substr($data, $fp), "\r\n") + 2);
	        $num = hexdec(trim($rawnum));
	        $fp += strlen($rawnum);
	        $chunk = substr($data, $fp, $num);
	        $outData .= $chunk;
	        $fp += strlen($chunk);
	    }
	    return $outData;
	}
	
	public static function FTPVerify($host,$username,$password){

		$ftpcon_id = @ftp_connect($host) or $status = __("Couldn't connect to ").$host ;
		if(isset($status)) return $status;
		unset($status);
		if(@ftp_login($ftpcon_id,$username,$password)){		
			@ftp_close($ftpcon_id);
			return false;
		}else {
			@ftp_close($ftpcon_id);
			return __("Couldn't connect as ").$username;
		}

	}
	
	public static function FTPVerifyStie($host,$ftptype,$port,$username,$password,$path,$verify_file,$verify_code){

		if($ftptype=='SOCKET'){
			$ftpObj = new lib_ftp_socket($host,$port,Conf()->DEVSERVER);
		}elseif($ftptype=='SFTP'){
			$ftpObj = new lib_sftp($host,$port,Conf()->DEVSERVER);
		}elseif($ftptype=='EXPSSL'){
			$ftpObj = new lib_ftp_native_ssl($host,$port,Conf()->DEVSERVER);
		}else{
			
			$ftpObj = new lib_ftp_native($host,$port,Conf()->DEVSERVER);
			/*
			$ftpcon_id = @ftp_connect($host) or $status = "Couldn't connect to ".$host;
			if(isset($status)) return $status;
			unset($status);
	
			if(@ftp_login($ftpcon_id,$username,$password)){
				@ftp_pasv($ftpcon_id, true);
				if(@ftp_chdir($ftpcon_id, $path)){
	
					$temp = tmpfile();
					fwrite($temp,$verify_code);
					fseek($temp,0);
	
					if(@ftp_fput($ftpcon_id,$verify_file,$temp,FTP_ASCII)) {
					    @fclose($temp);
						@ftp_close($ftpcon_id);
						return false;
					} else {
						@fclose($temp);
						@ftp_close($ftpcon_id);
					    return "Could not upload ".$verify_file."\n";
					}
	
				}else{
					@ftp_close($ftpcon_id);
					return "Could not access directory ".$path;
				}
			}else{
				@ftp_close($ftpcon_id);
				return "Could not connect to server by ".$username."@".$host;
			}*/
		}
		
		
		
		$conn_success = @$ftpObj->connect();
		if ($conn_success!==TRUE) {
			return __("Could not connect to server ").$host;
		}
		
		// login with username and password
		$login_result = @$ftpObj->login($username, addslashes($password));
		
		
		
		if ((!$login_result)) {
			return __("FTP login has failed ").$username."@".$host;
		}
		
		
		@$ftpObj->init();
		
		@$ftpObj->setbasedir($path);
		
		$tempfile = "../../tmp/ftp_verify_{$verify_code}.tmp";
		$temp_hd = @fopen($tempfile, 'w');
		@fwrite($temp_hd,$verify_code);
		@fflush($temp_hd);
		@fclose($temp_hd);
		
		
		
		$success = @$ftpObj->uploadfilescript($verify_file,$tempfile);
		unlink($tempfile);
		
		@$ftpObj->close();
		
		if($success){
			return false;
		}
		
		return __("Fail to upload verify file");
		
	}
	public static function FTPWriteFile($host,$ftptype,$port,$username,$password,$path,$filename,$content){

		if($ftptype=='SOCKET'){
			$ftpObj = new lib_ftp_socket($host,$port,Conf()->DEVSERVER);
		}elseif($ftptype=='SFTP'){
			$ftpObj = new lib_sftp($host,$port,Conf()->DEVSERVER);
		}elseif($ftptype=='EXPSSL'){
			$ftpObj = new lib_ftp_native_ssl($host,$port,Conf()->DEVSERVER);
		}else{
			
			$ftpObj = new lib_ftp_native($host,$port,Conf()->DEVSERVER);
			/*
			$ftpcon_id = @ftp_connect($host) or $status = "Couldn't connect to ".$host;
			if(isset($status)) return $status;
			unset($status);
	
			if(@ftp_login($ftpcon_id,$username,$password)){
				@ftp_pasv($ftpcon_id, true);
				if(@ftp_chdir($ftpcon_id, $path)){
	
					$temp = tmpfile();
					fwrite($temp,$verify_code);
					fseek($temp,0);
	
					if(@ftp_fput($ftpcon_id,$verify_file,$temp,FTP_ASCII)) {
					    @fclose($temp);
						@ftp_close($ftpcon_id);
						return false;
					} else {
						@fclose($temp);
						@ftp_close($ftpcon_id);
					    return "Could not upload ".$verify_file."\n";
					}
	
				}else{
					@ftp_close($ftpcon_id);
					return "Could not access directory ".$path;
				}
			}else{
				@ftp_close($ftpcon_id);
				return "Could not connect to server by ".$username."@".$host;
			}*/
		}
		
		
		$conn_success = $ftpObj->connect();
		if ($conn_success!==TRUE) {
			return __("Could not connect to server ").$host;
		}
		
		// login with username and password
		$login_result = $ftpObj->login($username, addslashes($password));
		
		
		
		if ((!$login_result)) {
			return __("FTP login has failed ").$username."@".$host;
		}
		
		
		$ftpObj->init();
		
		$ftpObj->setbasedir($path);
		
		$tempfile = "../../tmp/ftp_write_".md5($content).".tmp";
		$temp_hd = @fopen($tempfile, 'w');
		fwrite($temp_hd,$content);
		fflush($temp_hd);
		fclose($temp_hd);
		
		$success = $ftpObj->uploadfilescript($filename,$tempfile);
		unlink($tempfile);
		
		$ftpObj->close();
		
		if($success){		
			return false;
		}
		
		return __("Fail to upload file");
		
	}	
	
	
	public static function isPrimaryDomain($domain,&$match=null){
		return preg_match("/^(www\.)?([\w\d-]+)\.((\w\w\w?(\.\w\w)?)|info|mobi)$/",$domain,$match);
		
	}
}