<?
// -------------------------------------------------------------------------------
// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
// -------------------------------------------------------------------------------
// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
// -------------------------------------------------------------------------------
// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
// -------------------------------------------------------------------------------
// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
// -------------------------------------------------------------------------------
// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
// -------------------------------------------------------------------------------
// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
// -------------------------------------------------------------------------------
// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
// -------------------------------------------------------------------------------
// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
// -------------------------------------------------------------------------------
// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
// -------------------------------------------------------------------------------
// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src

//+INIT
$global_memsite_member_active = FALSE;
$bypass_check_package = false;
//-INIT
class Inc_Authen{
		

	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
	//
	//
	//
	//
	//



	public static function GetCurrentProject(){
		if(Conf()->CURRENTPROJECT>0){
			$sessionCache = Inc_SessionCache::GetModelObject(MD_Project,Conf()->CURRENTPROJECT);
			if($sessionCache!=NULL){
				return $sessionCache;
			}
			$projectObj = MD_Project::BuildByID(Conf()->CURRENTPROJECT);
			Inc_SessionCache::SetModelObject($projectObj);
			return $projectObj;
		}
		return NULL;
	}

	
	public static function GetCurrentOwnerID(){
		if(Conf()->CURRENTPROJECT>0){
			$projectObj = self::GetCurrentProject();
			if($projectObj!=NULL){
				return $projectObj->member_id;
			}
		}
		return self::GetCurrentMember()->id;
	}
	
	public static function GetCurrentOwner(){
		$id = self::GetCurrentOwnerID();
		if($id==self::GetCurrentMember()->id)
			return self::GetCurrentMember();
		$sessionCache = Inc_SessionCache::GetModelObject(MD_UserDental,$id);
		if($sessionCache!=NULL){
			return $sessionCache;
		}
		$retObj = MD_UserDental::BuildByID($id);
		
		return $retObj;
	}
	
	public static function GetCurrentMember(){

		if(Conf()->UNITTEST){
			if(Conf()->UNITCASE_GetCurrentMember!=NULL){
				return Conf()->UNITCASE_GetCurrentMember;
			}

				
		}
		
		
		
		$apiemail = Req(apiemail);
		if($apiemail!=NULL){
			$apikey = Req(apikey);
			$memberObj = MD_UserDental::BuildByEmail($apiemail);
			if($memberObj!=NULL){
				if($apikey==$memberObj->secretkey){
					return $memberObj;
				}else{
					echo(sprintf(__("Incorrect %s API Key %s."),WHITELABELNAMEFULL,$apikey));
                                        
					exit();
				}
			}else{
				
                                echo(WHITELABELNAMEFULL.__(" API user does not exist. ").$apiemail);
				exit();
			}
		}
		
		
		
		//Inc_Var::vardump(Conf()->global_current_member->email);
		if(!$_SESSION['session_logout'] && Conf()->global_current_member==NULL){
			//echo "XXX ".$_SESSION['session_userdentalid'];
			$sessionCache = Inc_SessionCache::GetModelObject(MD_UserDental, $_SESSION['session_userdentalid']); 
			if($sessionCache!=NULL){
				Conf()->global_current_member = $sessionCache;
			}else{
				Conf()->global_current_member = MD_UserDental::BuildByID($_SESSION['session_userdentalid']);
				if(Conf()->global_current_member!=NULL){
					Conf()->global_current_member->IsReseller();
					Conf()->global_current_member->GetMemberShipVENDERValidName();
					Conf()->global_current_member->IsPurchaseHOST();
					Conf()->global_current_member->IsPurchaseCLOUDFILE();
					Conf()->global_current_member->IsPurchaseMAILER();
					Inc_SessionCache::SetModelObject(Conf()->global_current_member);
				}
			}

				
		}
		
		if(Conf()->global_current_member==null && !$_SESSION['session_logout']){
			$tmp = MD_UserDental::BuildByID($_COOKIE['cookies_member_id']);
			if($tmp!=null){
				$multisessionAr = $tmp->multisessionid;

				if(
					Conf()->DEBUG || 
					(
						(
							$tmp->Get('sessionid')==$_COOKIE['cookies_session_id'] || in_array($_COOKIE['cookies_session_id'],$multisessionAr)
						)
					)
				){
						
					setcookie('cookies_session_id',session_id(),time()+3600*24*7,"/");
					setcookie('cookies_userdentalid',$tmp->get('id'),time()+3600*24*7,"/");


					if($tmp->sessionid!=session_id()){
						$tmp->Set('sessionid',session_id());
						$tmp->Set('usr_lastlogin',Inc_Var::DatePHPToMysql(mktime()));
					}
					$tmp->Update();
					Inc_Browser::recordLogin($obj,'cookies');
						
					$_SESSION['session_userdentalid'] = $tmp->get('id');
					
						
						
					Conf()->global_current_member = $tmp;
					Conf()->global_current_member->IsReseller();
					Conf()->global_current_member->GetMemberShipVENDERValidName();
					Conf()->global_current_member->IsPurchaseHOST();
					Conf()->global_current_member->IsPurchaseCLOUDFILE();
					Conf()->global_current_member->IsPurchaseMAILER();
					Inc_SessionCache::SetModelObject(Conf()->global_current_member);

						

				}
			}
		}
		//Inc_Var::vardump(Conf()->global_current_member->email);
		//echo "XXXX";
		return Conf()->global_current_member;
	}



	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
	//
	//
	//
	//
	//
	public static function GetMemSiteMember($memsiteid=NULL){
		global $global_memsite_member,$global_memsite_member_active;

		if(!$global_memsite_member_active){
				
			if(!$_SESSION['sessite'.$memsiteid.'_logout']){
				$global_memsite_member = MD_UserDental::BuildByID($_SESSION['sessite'.$memsiteid.'_member_id']);
			}
			$global_memsite_member_active = TRUE;
		}

		if($global_memsite_member==null && !$_SESSION['sessite'.$memsiteid.'_logout']){
			
			$tmp = MD_UserDental::BuildByID($_COOKIE['cookies_memsite'.$memsiteid.'_id']);
			
			if($tmp==NULL){
				$memsiteObj = MD_MemSite::BuildByID($memsiteid);
				if($memsiteObj==NULL)return NULL;
				$ownerObj = MD_UserDental::BuildByID($memsiteObj->member_id);

				$tmp = MD_UserDental::BuildByID($_COOKIE['cookies_siteowner'.$ownerObj->id.'_id']);
				
				if($tmp!=NULL){
					$memshipArray = $tmp->GetMemShipArrayByOwner($ownerObj->id);
					
					if($memshipArray->Count() == 0) {
						$_SESSION['sessite'.$memsiteid.'_logout'] = true;
						$tmp = NULL;
					}else{
						
						$isFoundLevel = false;
						$levelAR = $memsiteObj->GetAllProtectionLevel();
						foreach($memshipArray->GetArray() as $id=>$memshipObj){
							if(in_array($memshipObj->memlevel_id, $levelAR)){
								$isFoundLevel = true;
								break;
							}
						}
						
						if(!$isFoundLevel){
							$tmp = NULL;
							$_SESSION['sessite'.$memsiteid.'_logout'] = true;
						}
					}
				}
				
				
			}
			
			if($tmp!=null && $tmp->Get('sessiteid')==$_COOKIE['cookies_sessite_id']){

				setcookie('cookies_sessite_id',session_id(),time()+3600*24*7,"/");
				setcookie('cookies_memsite'.$memsiteid.'_id',$tmp->get('id'),time()+3600*24*7,"/");

				$tmp->Set('sessiteid',session_id());
				//$tmp->Set('usr_lastlogin',Inc_Var::DatePHPToMysql(mktime()));

				$tmp->Update();

				$_SESSION['sessite'.$memsiteid.'_member_id'] = $tmp->get('id');

				$global_memsite_member = $tmp;
			}
			
			
			
		}

		return $global_memsite_member;
	}


	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
	//
	//
	//
	//
	//
	
	public static function IsBehalf(){
		if(Inc_Authen::GetCurrentOwnerID()==Inc_Authen::GetCurrentMember()->id)return false;
		return true;
	}
	
	public static function IsAdmin(){
		if(Inc_Authen::GetCurrentMember()==null)return false;
		if(Inc_Authen::GetCurrentMember()->GetMemberShipVENDERValidName()=='PP_ADMIN')return true;
		return false;
	}
	public static function IsMod($id=0){
		$advance_user = array(1,2,WHITELABEL_SYS_ACCID,9,14,20201,24601,75581,277921,750771,1870915,5363905);
		if($id>0){
			$memberObj = MD_UserDental::BuildByID($id);
		}else{
			$memberObj = Inc_Authen::GetCurrentMember();
		}
		
		if($id>0 && in_array($id, $advance_user)) return true;
		if($memberObj==NULL) return false;
		if($memberObj->GetMemberShipVENDERValidName()=='PP_MOD')return true;
		if($memberObj->GetMemberShipVENDERValidName()=='PP_ADMIN')return true;
		return false;
	}
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
	//
	//
	//
	//
	//
	public static function IsAdvanceUser($id=0) {
		$advance_user = array(1,2,WHITELABEL_SYS_ACCID,9,14,20201,24601,75581,277921,750771,1870915,5363905,506021);
		if($id>0 && in_array($id, $advance_user)) return true;
		if(Inc_Authen::GetCurrentMember()!=NULL && Inc_Authen::GetCurrentMember()->GetMemberShipVENDERValidName()=='PP_ADMIN' ) return true;
		if(Inc_Authen::GetCurrentMember()!=NULL && in_array(Inc_Authen::GetCurrentMember()->id, $advance_user)) return true;
		//if(Inc_Authen::GetCurrentMember()==NULL && id==0) return false;
		return false;
	}
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
	//
	//
	//
	//
	//
	public static function IsDummyUser(){
		return false;
	}
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
	//
	//
	//
	//
	//


	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
	//
	//
	//
	//
	//



	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
	//
	//
	//
	//
	//
	public static function checkLogin(){
		$member = Inc_Authen::GetCurrentMember();

		global $package_advance_monthly;
		global $package_advance_yearly;
		global $package_advance_lifetime;


		//include "../sitedown.php";


		//echo "XXXX".$member->GetMemberShipVENDERValidName();
		
		if($member == null){
			Uncat_page_pleaselogin::GenerateHtml();
			exit();
		}
		//$member->WipeData();

		if(Conf()->ENABLEHTTPS && !Inc_Server::is_https()){
			Inc_Htmlutil::forward("https://".$_SERVER['HTTP_HOST']."".$_SERVER['REQUEST_URI']);
			exit();
		}
		global $bypass_check_package;
		//Inc_Var::vardump($bypass_check_package);
		if(!$bypass_check_package){
			if($member->GetMemberShipVENDERValidName()=='PP_PENDING'){
				$coupon = Inc_Authen::GetCurrentMember()->GetLastCoupon();
				
				Page_NotifyMessage::GenerateHtml(sprintf(__("Your account is being processed.<br/> If you have any question please contact %s"),"support@".WHITELABELMAINDOMAIN));
				exit();
			}
			if($member->GetMemberShipVENDERValidName()=='EXPIRE'){
				//Inc_Var::vardump(Inc_Authen::GetCurrentMember());
				$coupon = Inc_Authen::GetCurrentMember()->GetLastCoupon();

				//if($coupon=='FREE192347658PROACCOUNT'){
				Inc_Htmlutil::forward(WHITELABEL_ACCOUNT_EXPIREDURL);
			}
		}

	}
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
	//
	//
	//
	//
	//
	public static function DenyDummy(){
		if(Inc_Authen::IsDummyUser()){
			exit(__("Permission Denied for shared user"));
		}
	}
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
	//
	//
	//
	//
	//
	public static function ValidateNonce($custom='') {
		$insys_nonce = Req(insys_nonce);
		$act = Req(act);
		$todo = Req(todo);
		

		
		
		if($custom!='') {
			return Nonce::ValidateNonce($insys_nonce, $act, $todo, $custom);
		} else {
			return Nonce::ValidateNonce($insys_nonce, $act, $todo);
		}
	}


	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
	//
	//
	//
	//
	//
	public static function GetUniqueIdentify(){
		if($_SESSION['SESSION_ID']==null){
			if($_COOKIE['SESSION_ID']==null){
				global $g_currentprocess;
				$uniqueID = $g_currentprocess.mktime().substr(md5(rand()),0,8);
				setcookie('SESSION_ID',$uniqueID,time()+60*60*24*365,"/");
			}else{
				$uniqueID = $_COOKIE['SESSION_ID'];
			}
			$_SESSION['SESSION_ID'] = $uniqueID;
		}else{
			$uniqueID = $_SESSION['SESSION_ID'];
			if($_COOKIE['SESSION_ID']!=$uniqueID){
				setcookie('SESSION_ID',$uniqueID,time()+60*60*24*365,"/");
			}
		}
		return $uniqueID;

	}

	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
	//
	//
	//
	//
	//
	public static function SetUniqueIdentify($uniqueID){
		setcookie('SESSION_ID',$uniqueID,time()+60*60*24*365,"/");
		$_SESSION['SESSION_ID'] = $uniqueID;
	}

	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
	//
	//
	//
	//
	//
	public static function checkPackage($package,$show=true,$member_or_package=NULL){
		if(Conf()->UNITTEST){
			switch(Conf()->UNITCASE_checkPackage){
				case 'True':
					return true;
				default:
					return false;
			}
		}

		if($member_or_package==NULL){
			$member_or_package = Inc_Authen::GetCurrentOwner();
		}
		
		if($member_or_package==NULL){
			return false;
		}
		if(is_string($member_or_package)){
			$mytype = $member_or_package;
		}else{
			$mytype = $member_or_package->GetMemberShipVENDERValidName();
		}
		//echo 'sssss'.$mytype;
		$a=100;$b=100;
		switch($mytype){
			default:
			case 'EXPIRE': 		$a--;
			case 'PP_AFFILIATE':$a--;
			case 'PP_FREE': 	$a--;
			
			case 'PP_MICRO': 	$a--;
			
			case 'PP_NANO1': 	$a--;
			case 'PP_NANO2': 	$a--;
			case 'PP_NANO3': 	$a--;
				
			case 'PP_TESTER':	$a--;
			case 'PP_BASIC':	$a--;
			case 'PP_STANDARD':	$a--;
			case 'PP_INTER': 	$a--;
			case 'PP_ADVANCED': $a--;
			case 'PP_PROL': 	$a--;
			case 'PP_PRO': 		$a--;
			case 'PP_PRO2':		$a--;
			case 'PP_EXTREME':	$a--;
			case 'PP_MOD':		$a--;
			case 'PP_ADMIN': 	$a--;

		}
		switch($package){
			default:
			case 'PP_EXPIRE': 	$b--;
			case 'PP_AFFILIATE':$b--;
			case 'PP_FREE': 	$b--;
			
			case 'PP_MICRO': 	$b--;

			case 'PP_NANO1': 	$b--;
			case 'PP_NANO2': 	$b--;
			case 'PP_NANO3': 	$b--;
			
			case 'PP_TESTER':	$b--;
			case 'PP_BASIC':	$b--;
			case 'PP_STANDARD':	$b--;
			case 'PP_INTER': 	$b--;
			case 'PP_ADVANCED': $b--;
			case 'PP_PROL':		$b--;
			case 'PP_PRO': 		$b--;
			case 'PP_PRO2':		$b--;
			case 'PP_EXTREME':	$b--;
			case 'PP_MOD':		$b--;
			case 'PP_ADMIN': 	$b--;
		}


		if($a>=$b)return true;


		if($show){
			Panel_Protectpackage::CheckLimit(NULL,$package);
		}
		return false;
	}
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
	//
	//
	//
	//
	//
	public static function privilegeLimit($key,$package=NULL){
		//=============== FOR UNIT TEST ======================//
		/*if(Conf()->UNITTEST){
			if(Conf()->UNITCASE_privilegeLimit!=NULL){
			return Conf()->UNITCASE_privilegeLimit;
			}
			}*/
		//======================= END ========================//
		global $PRIVILEGE;
		if($package==NULL){
			$package = Inc_Authen::GetCurrentOwner()->GetMemberShipVENDERValidName();
			

			
		}
		if($package=='EXPIRE')return 0;
		if($package=='ADMIN')return -1;
		
		if($PRIVILEGE[$package][$key]===NULL && strpos($key,"DISABLE")===0){
			return false;
		}
		if(Conf()->DEBUG && $PRIVILEGE[$package][$key]===NULL){
			echo "Unimplement PRIVILEGE[$package][$key]";
			exit();
		}
		return $PRIVILEGE[$package][$key];
	}
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
	//
	//
	//
	//
	//
	public static function GetCurrentPackage(){
		if(Inc_Authen::GetCurrentMember()==NULL)return '';
		return Inc_Authen::GetCurrentMember()->GetMemberShipVENDERValidName();
	}
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
	//
	//
	//
	//
	//

	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
	//
	//
	//
	//
	//
	public static function AssertWrite($obj){
		if($obj==NULL){
			if(Conf()->DEVSERVER){
				echo "<pre>";
				debug_print_backtrace();
				echo "</pre>";
			}
			exit("object not found");
		}
		if(!$obj->WriteAble()){
			if(Conf()->DEBUG){
				Inc_Debug::PrintStack();	
			}
			exit("no permission");
		}
	}
	public static function AssertRead($obj){
		if($obj==NULL){
			if(Conf()->DEVSERVER){
				echo "<pre>";
				debug_print_backtrace();
				echo "</pre>";
			}
			exit("object not found");
		}
		if(!$obj->ReadAble()){
			if(Conf()->DEBUG){
				Inc_Debug::PrintStack();	
			}
			exit("no permission");
		}
	}	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src
	//
	//
	//
	//
	//
	public static function AssertWriteIgNULL($obj){
		if($obj==NULL)return true;
		else return Inc_Authen::AssertWrite($obj);
	}


}
