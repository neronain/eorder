<?

class Inc_Secur{
			
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function encrypt($text,$key,$iv='fYfhHeDm',$bit_check=8) {
		if( empty( $text ) ) return '';
		
		if(Conf()->DEBUG && $key==''){
			Inc_Var::vardump($text);
			Inc_Var::vardump($key);
			Inc_Var::vardump($iv);
			Inc_Var::vardump($bit_check);
			echo "<pre>";
			debug_print_backtrace();
			echo "</pre>";
		}
		$text_num =str_split($text,$bit_check);
		$text_num = $bit_check-strlen($text_num[count($text_num)-1]);
		for ($i=0;$i<$text_num; $i++) {$text = $text . chr($text_num);}
		$cipher = mcrypt_module_open(MCRYPT_TRIPLEDES,'','cbc','');
		mcrypt_generic_init($cipher, $key, $iv);
		$decrypted = mcrypt_generic($cipher,$text);
		mcrypt_generic_deinit($cipher);
		return base64_encode($decrypted);
	}
	
	public static function encryptsafe($text, $key, $iv='fYfhHeDm', $bit_check=8) {
		$encrypted_string = self::encrypt($text,$key,$iv,$bit_check);
		$encrypted_string = str_replace("/","%2F",$encrypted_string);
		return $encrypted_string;
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function decrypt($encrypted_text,$key,$iv='fYfhHeDm',$bit_check=8){
		if( empty( $encrypted_text ) ) return '';
	
		$encrypted_text = str_replace(" ","+",$encrypted_text);
		$cipher = mcrypt_module_open(MCRYPT_TRIPLEDES,'','cbc','');
		mcrypt_generic_init($cipher, $key, $iv);
		$decrypted = mdecrypt_generic($cipher,base64_decode($encrypted_text));
		mcrypt_generic_deinit($cipher);
		$last_char=substr($decrypted,-1);
		for($i=0;$i<$bit_check-1; $i++){
			if(chr($i)==$last_char){
				$decrypted=substr($decrypted,0,strlen($decrypted)-$i);
				break;
			}
		}
		while(ord($decrypted[strlen($decrypted)-1]) == 7) {
			$decrypted = substr($decrypted,0,strlen($decrypted)-1);
		}
		return $decrypted;
	}
	
	
	public static function decryptsafe($encrypted_text,$key,$iv='fYfhHeDm',$bit_check=8){
			$encrypted_text = str_replace("%2f","/",$encrypted_text);
			$decrypted = self::decrypt($encrypted_text,$key,$iv,$bit_check);
			return $decrypted;
	}
	
	
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function GenerateURL($key,$pageid,$from,$fromsplit,$link,$split='',$type='LONG') {
	
		switch($type) {
			case 'SHORT':
				$new_pageid = Inc_Secur::custombase_convert_big($pageid,'DEC','BASE62');
				$new_from = Inc_Secur::custombase_convert_big($from,'DEC','BASE62');
				$new_fromsplit = $fromsplit;
				$new_split = $split;
				switch($link) {
					case 'YES1':
					case 'Y1':
						$new_link = 1;
						break;
					case 'YES2':
					case 'Y2':
						$new_link = 2;
						break;
					case 'YES3':
					case 'Y3':
						$new_link = 3;
						break;
					case 'NO':
					case 'N':
					default:
						$new_link = 0;
						break;
				}
				$input = "p={$new_pageid}&n={$new_from}&f={$new_fromsplit}".(isset($split)&&$split!='' ? '&s='.$split : '')."&l={$new_link}";
				break;
			case 'LONG':
			default:
				$new_pageid = $pageid;
				$new_from = $from;
				$new_fromsplit = $fromsplit;
				$new_link = $link;
				$new_split = $split;
				$input = "pageid={$new_pageid}&from={$new_from}&fromsplit={$new_fromsplit}".(isset($split)&&$split!='' ? '&split='.$split : '')."&link={$new_link}";
				break;
		}
	
		$encrypted_string= Inc_Secur::encrypt($input,$key);
	
		return $encrypted_string;
	}
	public static function DeGenerateURL($key,$encrypted_string) {
		$encrypted_string = str_replace("%2F","/",$encrypted_string);
		$str = Inc_Secur::decrypt($encrypted_string, $key);
		$param = Inc_Var::pairstr2Arr($str,'=','&');
		
		if($param['n']){
			$param['from']= Inc_Secur::custombase_convert_big($param['n'],'BASE62','DEC');
			unset($param['n']);
		}

		if($param['p']!==NULL){
			$param['pageid']= Inc_Secur::custombase_convert_big($param['p'],'BASE62','DEC');
			unset($param['p']);
		}
		if($param['f']!==NULL){
			$param['fromsplit']= $param['f'];
			unset($param['f']);
		}
		if($param['s']!==NULL){
			$param['split']= $param['s'];
			unset($param['s']);
		}
		if($param['l']!==NULL){
			switch($param['l']) {
				case 1:
					$param['link'] = 'YES1';
					break;
				case 2:
					$param['link'] = 'YES2';
					break;
				case 3:
					$param['link'] = 'YES3';
					break;
				case 0:
					$param['link'] = 'NO';
					break;
			}
			unset($param['l']);
		}
		
		return $param;
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function encryptFTP($ftp_password,$secretkey,$cutround=4) {
		if( empty($ftp_password) ) return '';
		$secretkey_length = strlen($secretkey);
		$subkey_length = floor($secretkey_length/$cutround);
		for($i=0;$i<$cutround;$i++) {
			$tmp = '';
			if($i < $cutround-1) {
				$tmp = substr($secretkey,$i*$subkey_length,$subkey_length);
				$secret[$tmp[0]] = $tmp;
			} else {
				$tmp = substr($secretkey,$i*$subkey_length);
				$secret[$tmp[0]] = $tmp;
			}
		}
		ksort($secret);
		$secret_first = $secret[count($secret)];
		$secret_last = $secret[0];
		$encrypted_password = Inc_Secur::encrypt($ftp_password,$secret_first."PP".$secret_last);
	
		return $encrypted_password;
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function decryptFTP($encrypted_password,$secretkey,$cutround=4) {
		if( empty($encrypted_password) ) return '';
		$secretkey_length = strlen($secretkey);
		$subkey_length = floor($secretkey_length/$cutround);
		for($i=0;$i<$cutround;$i++) {
			$tmp = '';
			if($i < $cutround-1) {
				$tmp = substr($secretkey,$i*$subkey_length,$subkey_length);
				$secret[$tmp[0]] = $tmp;
			} else {
				$tmp = substr($secretkey,$i*$subkey_length);
				$secret[$tmp[0]] = $tmp;
			}
		}
		ksort($secret);
		$secret_first = $secret[count($secret)];
		$secret_last = $secret[0];
		$ftp_password = Inc_Secur::decrypt($encrypted_password,$secret_first."PP".$secret_last);
	
		while(ord($ftp_password[strlen($ftp_password)-1]) == 7) {
			$ftp_password = substr($ftp_password,0,strlen($ftp_password)-1);
		}
		return $ftp_password;
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function custombase_convert_big($numstring, $frombase, $tobase)
	{
		$preset = array(
			'DEC' => "0123456789",
			'HEX' => "0123456789abcdef",
			'DCP' => "0123456789abcdef|",
			'DCP2' => "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
			'BASE62' => "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
			'BASE62PLUS' => "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,",
			'BASE36' => "0123456789abcdefghijklmnopqrstuvwxyz",
			'BASE36CAP' => "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",
			'RAND62' => "qEyp8Vw0rFX5o2IRbvnGSdhmsfaZ97Ht4jDCAulxYPQieLgWNTJUMB3Kk16Ozc",
			'PWD52' => "2346789abcdefghjkmnpqrtuvwxyzABCDEFGHJKLMNPQRTUVWXYZ",
			'URL' => "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$-_.+!*'(),{}|\^~[]`<>#%\";/?:@&=", //RFC 2396,RFC 1738 
		);
	
	
		/*$DEC = "0123456789";
		$HEX = "0123456789abcdef";
		$DCP = "0123456789abcdef|";
		$DCP2 = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
		$BASE62 = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
		$BASE36 = "0123456789abcdefghijklmnopqrstuvwxyz";
		$RAND62 = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
		*/
	
		if($preset[$frombase]!="") $frombase = $preset[$frombase];
		if($preset[$tobase]!="") $tobase = $preset[$tobase];
		/*if($frombase=='DEC')	$frombase = $DEC;
		if($frombase=='HEX')	$frombase = $HEX;
		if($frombase=='DCP')	$frombase = $DCP;
		if($frombase=='DCP2')	$frombase = $DCP2;
		if($frombase=='BASE62')	$frombase = $BASE62;
		if($frombase=='BASE36')	$frombase = $BASE36;
	
		if($tobase=='DEC')		$tobase = $DEC;
		if($tobase=='HEX')		$tobase = $HEX;
		if($tobase=='DCP')		$tobase = $DCP;
		if($tobase=='DCP2')		$tobase = $DCP2;
		if($tobase=='BASE62')	$tobase = $BASE62;
		if($tobase=='BASE36')	$tobase = $BASE36;
		*/
	
		if($frombase=='')exit("Error custombase_convert_big frombase empty");
		if($tobase=='')exit("Error custombase_convert_big tobase empty");
	
	    $from_count = strlen($frombase);
	    $to_count = strlen($tobase);
	    $length = strlen($numstring);
	    $result = '';
	    for ($i = 0; $i < $length; $i++)
	    {
	        $number[$i] = strpos($frombase, $numstring{$i});
	    }
	    do // Loop until whole number is converted
	    {
	        $divide = 0;
	        $newlen = 0;
	        for ($i = 0; $i < $length; $i++) // Perform division manually (which is why this works with big numbers)
	        {
	            $divide = $divide * $from_count + $number[$i];
	            if ($divide >= $to_count)
	            {
	                $number[$newlen++] = (int)($divide / $to_count);
	                $divide = $divide % $to_count;
	            }
	            else if ($newlen > 0)
	            {
	                $number[$newlen++] = 0;
	            }
	        }
	        $length = $newlen;
	        $result = $tobase{$divide} . $result; // Divide is basically $numstring % $to_count (i.e. the new character)
	    }
	    while ($newlen != 0);
	    return $result;
	}
	
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function extractEV($e,$v,$secretkey){
			$paramArr = NULL;
			$encrypted_string = str_replace(" ","+",$e);
			$validate_code = str_replace(" ","+",$v);
			if(substr(md5("PP".$encrypted_string.$secretkey),0,8) == $validate_code) {
				$paramStr = Inc_Secur::decrypt($encrypted_string,$secretkey);
				$paramArr = Inc_Var::pairstr2Arr($paramStr,"=","&");
			} else {
				exit("No Page Found Inc_Secur::extractEV()");
			}
			return $paramArr;
	}
	
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function cbValid($secretkey,$cbreceipt,$time,$item,$cbpop)
	{
		$xxpop=sha1("$secretkey|$cbreceipt|$time|$item");
		$xxpop=strtoupper(substr($xxpop,0,8));
		if ($cbpop==$xxpop) return 1;
		return 0;
	}
	
	
	
		//TODO :REWRITE
	public static	function ClearModSecure($content){
			//MOD_SECURITY
			############################################################################
			$content = preg_replace('/(f)x(rom)/i','$1$2',$content);
			$content = preg_replace('/(s)x(elect)/i','$1$2',$content);
			$content = preg_replace('/(u)x(pdate)/i','$1$2',$content);
			$content = preg_replace('/(i)x(nto)/i','$1$2',$content);
			$content = preg_replace('/(d)x(atabase)/i','$1$2',$content);
			$content = preg_replace('/(i)x(ndex)/i','$1$2',$content);
			$content = preg_replace('/(v)x(iew)/i','$1$2',$content);
			############################################################################
			return $content;
		}	
	
	public static function safeUrlEncrypt($key,$data){
		
		$fb_str = json_encode($data);
		$fb_enc = Inc_Secur::encrypt($fb_str, $key);
		
		//$fb_gz = gzcompress($fb_enc);
		
		$fb_hex = Inc_Var::stringToHex($fb_enc);
		$fb_64 = Inc_Secur::custombase_convert_big($fb_hex, 'HEX', 'BASE62');
		
		return $fb_64;
	}
	public static function safeUrlDecrypt($key,$string){
		
		$fb_hex = Inc_Secur::custombase_convert_big($string, 'BASE62', 'HEX');
		$fb_enc = Inc_Var::hexToString($fb_hex);

		//$fb_enc = gzuncompress($fb_gz);
		
		$fb_str = Inc_Secur::decrypt($fb_enc,$key);
		$data = json_decode($fb_str,true);
		
		return $data;
	}
}