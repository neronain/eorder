<?

class Inc_Io{
			
	
	
	function readline( $fp, $delim="\n" )
	{
	    $result = "";
	    while( !feof( $fp ) )
	    {
	        $tmp = fgetc( $fp );
	        if( $tmp == $delim )
	            return $result;
	        $result .= $tmp;
	    }
	    return $result;
	}
		
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function generateFilepath($extension,$uploadpath=''){
		$localtime = mktime();
		$md = substr(md5($localtime.rand(1,1000)),0,6);
		
		$filename   = $localtime.rand(1,1000).$md.'.'.$extension;
		if($uploadpath=='')
		{
			$uploadpath = prepath().'../upload/'.date("Ym")."/";
		}
		
		$attachpath = $uploadpath.$filename;
		
		if(!is_dir($uploadpath))
	        @mkdir($uploadpath,0777,true) OR die("Can not changemode ".$uploadpath." to 777");
		
		return $attachpath;
	}
	
	public static function uploadfile($filename,$tmpfile,$filesize,$userid='',$attach_dir='file',$uploadroot='',$uploadpath='')
	{
	
	    global $localtime,$lang,$UPLOADBYPASS;
	
	    $extension  = strtolower(substr(strrchr($filename, "."),1));
	
	    if (!in_array($extension, Conf()->upload_type))
	    {
	    	SaveDS()->Warning('file',sprintf(__('File format not support (filename:%s) '),$filename));
	        return false;
	    }
	    //if($filesize>$attach_maxsize)
	       // e('common_file_toolarge');
	    //
		
		
		$attachpath = self::generateFilepath($extension);

		
		/*if($UPLOADBYPASS){
			$uploadroot = prepath()."../".$uploadroot;
			$uploadpath = prepath()."../".$uploadpath;
		}*/	
		
	    
	    if(@is_uploaded_file($tmpfile)){
	    	
	    	//$attachpathAr = Inc_Io::GetWritePath($attachpath);
	    	//foreach($attachpathAr as $acpath){
       		if(!@copy($tmpfile ,$attachpath)){
                SaveDS()->Put("io",sprintf(__("cant upload to %s"),$acpath));
                return false;
        	}
	    	//}
	    	@unlink($tmpfile);
	    	chmod($attachpath,0766);
	    	return $attachpath;
	    }
	    return false;
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function smartCopy($source, $dest, $options=array('folderPermission'=>0755,'filePermission'=>0755))
	{
		$result=false;
	   
		if (is_file($source)) {
			if ($dest[strlen($dest)-1]=='/') {
				if (!file_exists($dest)) {
					cmfcDirectory::makeAll($dest,$options['folderPermission'],true);
				}
				$__dest=$dest."/".basename($source);
			} else {
				$__dest=$dest;
			}
			$result=copy($source, $__dest);
			chmod($__dest,$options['filePermission']);
		   
		} else if(is_dir($source)) {
			if ($dest[strlen($dest)-1]=='/') {
				if ($source[strlen($source)-1]=='/') {
					//Copy only contents
				} else {
					//Change parent itself and its contents
					$dest=$dest.basename($source);
					@mkdir($dest);
					chmod($dest,$options['filePermission']);
				}
			} else {
				if ($source[strlen($source)-1]=='/') {
					//Copy parent directory with new name and all its content
					@mkdir($dest,$options['folderPermission']);
					chmod($dest,$options['filePermission']);
				} else {
					//Copy parent directory with new name and all its content
					@mkdir($dest,$options['folderPermission']);
					chmod($dest,$options['filePermission']);
				}
			}
	
			$dirHandle=opendir($source);
			while($file=readdir($dirHandle))
			{
				if($file!="." && $file!="..")
				{
					 if(!is_dir($source."/".$file)) {
						$__dest=$dest."/".$file;
					} else {
						$__dest=$dest."/".$file;
					}
					//echo "$source/$file ||| $__dest<br />";
					$result=Inc_Io::smartCopy($source."/".$file, $__dest, $options);
				}
			}
			closedir($dirHandle);
		   
		} else {
			$result=false;
		}
		return $result;
	} 
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function unlinkRecursive($dir, $deleteRootToo)
	{
	    if(!$dh = @opendir($dir))
	    {
	        return;
	    }
	    while (false !== ($obj = readdir($dh)))
	    {
	        if($obj == '.' || $obj == '..')
	        {
	            continue;
	        }
	
	        if (!@unlink($dir . '/' . $obj))
	        {
	            Inc_Io::unlinkRecursive($dir.'/'.$obj, true);
	        }
	    }
	
	    closedir($dh);
	   
	    if ($deleteRootToo)
	    {
	        @rmdir($dir);
	    }
	   
	    return;
	} 
	
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function recurse_copy($src,$dst) {
	    $dir = opendir($src);
	    @mkdir($dst);
	    while(false !== ( $file = readdir($dir)) ) {
	        if (( $file != '.' ) && ( $file != '..' )) {
				if($file==".svn")continue;
				if($file=="_notes")continue;
	            if ( is_dir($src . '/' . $file) ) {
	                Inc_Io::recurse_copy($src . '/' . $file,$dst . '/' . $file);
	            }
	            else {
	                copy($src . '/' . $file,$dst . '/' . $file);
	            }
	        }
	    }
	    closedir($dir);
	} 
	
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function cacheHeaders($lastModifiedDate) {
	  if ($lastModifiedDate) {
	    if (isset($_SERVER['HTTP_IF_MODIFIED_SINCE']) && strtotime($_SERVER['HTTP_IF_MODIFIED_SINCE']) >= $lastModifiedDate) {
	      if (php_sapi_name()=='CGI') {
	        Header("Status: 304 Not Modified");
	      } else {
	        Header("HTTP/1.0 304 Not Modified");
	      }
	      exit;
	    } else {
	      $gmtDate = gmdate("D, d M Y H:i:s\G\M\T",$lastModifiedDate);
	      header('Last-Modified: '.$gmtDate);
	    }
	  }
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function debuglog($str){
		global $file;
		if($file!=NULL){
			if(Conf()->UNITTEST && SaveDS()->ifError){
				fwrite($file, "ERROR!!! ".SaveDS()->GetErrorMsg(true)."\n"); 
			}
			fwrite($file, "$str\n"); 
		}
	
	}
	
	
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function net_post($url,$post){
		
		$contents = "";
		$pr_url=parse_url($url);
		$sock = @fsockopen($pr_url[host],"80",$err_num,$err_str,30); 
		if (!$sock) {
			die("Failed\r\n\r\nCould not connect to ".$argv[1]." on the port 80 !");
		}
		
		fputs($sock, "POST $pr_url[path] HTTP/1.1\r\n"); 
		fputs($sock, "Host: $pr_url[host]\r\n"); 
		fputs($sock, "Content-type: application/x-www-form-urlencoded\r\n"); 
		fputs($sock, "Content-length: ".strlen($post)."\r\n"); 
		fputs($sock, "Connection: close\r\n\r\n"); 
		fputs($sock, $post . "\r\n\r\n"); 
		
		while(!feof($sock)) {
			$contents .= @fgets($sock);
		}
		fclose($sock); 	
		return $contents;	
		
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function clickbank_encode($affiliate,$vender){
		$url = "http://www.clickbank.com/hoplink_encoding.htm";
		$post = "affiliate={$affiliate}&vendor={$vender}&searchButton=Encode";
		$data = Inc_Io::net_post($url,$post);
		preg_match_all('/http:\/\/[\w\d]+.hop.clickbank.net/s', $data, $matches);
		return $matches[0][0];
	}
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function clickbank_decode($chkurl){
		$url = "http://www.clickbank.com/hoplink_decoding.htm";
		$post = "url={$chkurl}&searchButton=Decode";
		$data = Inc_Io::net_post($url,$post);
		preg_match_all('/http:\/\/[\w\d]+\.[\w\d]+.hop.clickbank.net/', $data, $matches);
		return $matches[0][0];	
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function getDirectorySize($path) {
		$totalsize = 0;
		$totalcount = 0;
		$dircount = 0;
		if ($handle = opendir ($path)) {
			while (false !== ($file = readdir($handle))) {
				$nextpath = $path . '/' . $file;
				if ($file != '.' && $file != '..' && !is_link ($nextpath)) {
					if (is_dir ($nextpath)) {
						$dircount++;
						$result = Inc_Io::getDirectorySize($nextpath);
						$totalsize += $result['size'];
						$totalcount += $result['count'];
						$dircount += $result['dircount'];
					} elseif (is_file ($nextpath)) {
						$totalsize += filesize ($nextpath);
						$totalcount++;
					}
				}
			}
		}
		closedir ($handle);
		$total['size'] = $totalsize;
		$total['count'] = $totalcount;
		$total['dircount'] = $dircount;
		return $total;
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function sizeFormat($size,$precision=1) {
	    if($size<1024) {
	        return $size." bytes";
	    } else if($size<(1024*1024)) {
	        $size=round($size/1024,$precision);
	        return $size." KB";
	    } else if($size<(1024*1024*1024)) {
	        $size=round($size/(1024*1024),$precision);
	        return $size." MB";
	    } else {
	        $size=round($size/(1024*1024*1024),$precision);
	        return $size." GB";
	    }
	}  
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function CompressOutput($data=NULL){
		if($data==NULL){
			$data = ob_get_clean();
			ob_start();
		}
		if(Conf()->DEBUG && headers_sent()){
			echo $data;
			exit();
		}
		$compress = ( strpos( $_SERVER["HTTP_ACCEPT_ENCODING"], "gzip" ) !== false );
		if ($compress ) {
			$compressdata = gzencode  ( $data );
			header( "Content-Encoding: gzip" );
			header( "Content-Length: " . strlen($compressdata) );
			echo( $compressdata );
		}else{
			header( "Content-Length: " . strlen($data) );
			echo( $data );
		}
		ob_end_flush();
		//exit();
	}
	
	
	public static function Header404(){
		header("HTTP/1.0 404 Not Found");
		exit();
	}
	public static function DebugMemoryLeak($limit=33554432){//1024*1024*32
		if(memory_get_usage(true)>$limit){
			echo "<pre>";
			debug_print_backtrace();
			echo "</pre>";
			exit();
		}
	}
	public static function SyncFile($host,$filepath){
		if(!Conf()->DEBUG){
			exit('sync destination allow only DEBUG');
		}
		
		//$filepath = "../../log/logger.log";
		$file = $filepath;//"../../tmp/log.log";

		$fusion_url = "https://{$host}/".Def(Joay_Action_service)->URL_getfile(array('key'=>Joay_Action_service::GenKey(),'filepath'=>$filepath));
		$url_parsed = parse_url($fusion_url);
		
		if($url_parsed[host]=='localhost'){
			exit('sync source localhost not allow');	
		}
		
		$contents = "";
		$sock = @fsockopen("ssl://".$url_parsed[host],"443",$err_num,$err_str,30);
		if (!$sock) {
			exit("Socket error[".$err_num."]".$err_str);
		}
		$post_string = $url_parsed['query'];
		
		
		
		@fputs($sock, "POST $url_parsed[path] HTTP/1.1\r\n");
		@fputs($sock, "Host: $url_parsed[host]\r\n");
		@fputs($sock, "Content-type: application/x-www-form-urlencoded\r\n");
		@fputs($sock, "Content-length: ".strlen($post_string)."\r\n");
		@fputs($sock, "Connection: close\r\n\r\n");
		@fputs($sock, $post_string . "\r\n\r\n");
		
		
		while(!@feof($sock)) {
			set_time_limit(300);
			$contents .= @fgets($sock);
		}
		
		@fclose($sock);
		
		//echo $contents;
		$data = Inc_Server::AutoUnchunk($contents);
		//$data = explode("\r\n\r\n",$contents);
		if(!file_exists(dirname($file))){
			mkdir(dirname($file),true);
		}
		echo "Write {$file}[".$data."]";
		$dfp = fopen($file,'w+');
		fwrite($dfp,$data);
		fclose($dfp);	
	
	}
	
	
}