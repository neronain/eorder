<?

class Inc_Var{
			
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function replaceSlug($slug){
		$slug = strtr($slug,
				array(
						"A"=>"a",
						"B"=>"b",
						"C"=>"c",
						"D"=>"d",
						"E"=>"e",
						"F"=>"f",
						"G"=>"g",
						"H"=>"h",
						"I"=>"i",
						"J"=>"j",
						"K"=>"k",
						"L"=>"l",
						"M"=>"m",
						"N"=>"n",
						"O"=>"o",
						"P"=>"p",
						"Q"=>"q",
						"R"=>"r",
						"S"=>"s",
						"T"=>"t",
						"U"=>"u",
						"V"=>"v",
						"W"=>"w",
						"X"=>"x",
						"Y"=>"y",
						"Z"=>"z",
					));
		return $slug;
	}	
	public static function URLAddVar($url,$var){
		if(preg_match("/\?/",$url,$match)){
			return $url."&".$var;
		}
		return $url."?".$var;
	}
	
	public static function GetVar(&$varobj,$varname,$default=NULL)
	{
		//mysql_real_escape_string();
		global $_GET;
		global $_POST;
		//if(isset($varobj))	return;
		if(isset($_GET[$varname]))
		{
			$varobj = $_GET[$varname];
			$varobj  = Inc_Var::make_safe($varobj);
			//$varobj = str_replace("\\\"","",$varobj);
			//$varobj = str_replace("'","",$varobj);
		}
		else if(isset($_POST[$varname]))
		{
			$varobj = $_POST[$varname];
			$varobj  = Inc_Var::make_safe($varobj);
			//$varobj = str_replace("\\\"","",$varobj);
			//$varobj = str_replace("'","",$varobj);
		}
		if(!isset($varobj)){
			$varobj=$default;
		}
		if(is_string($varobj)){
			if(preg_match("/^ARRAY\((.*?)\)$/",$varobj,$matches)){
				$varobj = explode(',', $matches[1]);
			}
		}
		return $varobj;
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function make_safe($variable) {
		if(is_array($variable)){
			foreach($variable as $key =>$val){
				$variable[$key] = Inc_Var::make_safe($val);
			}
		}else{
			//$variable = self::mysql_escape_mimic(trim($variable));
			$variable = self::mysql_escape_mimic($variable);
		}
		return $variable;
	}
	public static function make_unsafe($variable) {
        //$variable = str_replace('\\"','"',$variable);
		//$variable = str_replace("\\'","'",$variable);
		//$variable = str_replace("\\","",$variable);
		

		if(Conf()->DOUBLE_ENCODE_QUOTE){
			$variable = str_replace("\\\\\\\\","&#92;",$variable);
			$variable = str_replace("\\n","\n",$variable);
			$variable = str_replace("\\\\\\'","'",$variable);
			$variable = str_replace("\\\\\\\"",'"',$variable);
			$variable = str_replace("&#92;","\\",$variable);		
		}else{
			$variable = str_replace("\\\\","&#92;",$variable);
			$variable = str_replace("\\n","\n",$variable);
			$variable = str_replace("\\'","'",$variable);
			$variable = str_replace("\\\"","\"",$variable);
			$variable = str_replace("&#92;","\\",$variable);		
		}
		


        return $variable;
    }
	
	function mysql_escape_mimic($inp) {
		if(is_array($inp))
			return array_map(__METHOD__, $inp);
	
		if(!empty($inp) && is_string($inp)) {
			return str_replace(array('\\', "\0", "\n", "\r", "'", '"', "\x1a"), array('\\\\', '\\0', '\\n', '\\r', "\\'", '\\"', '\\Z'), $inp);
		}
	
		return $inp;
	} 	
		
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function parseVar($var){
		$var = str_replace('\\"','"',$var);
		$var = str_replace("\\'","'",$var);
		$var = str_replace("\\","",$var);
		$var = htmlentities($var, ENT_QUOTES, "UTF-8");
		return $var;
	}	
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function CutString($str,$max){
		if(strlen($str)<=$max)return $str;
		return substr($str,0,$max-3)."...";
	}
	
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function DateMysqlToISO8601($text){
		if($text=="")return "0000-00-00T00:00:00";
		//$datearray=explode("/",$text);
		$dt = substr($text,0,10);
		return $dt."T00:00:00";
	}	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function DateMysqlToPHP($text){
		$text = str_replace(" ","-",$text);
		$text = str_replace(":","-",$text);	
		$datearray=explode("-",$text);
		//var_dump($datearray);
		//Inc_Var::vardump($datearray);
		return mktime($datearray[3]+0,$datearray[4]+0,$datearray[5]+0,$datearray[1]+0,$datearray[2]+0,$datearray[0]+0);
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function DatePHPToMysql($phpdate){
		$day = date('d',$phpdate+0);
		$month = date('m',$phpdate+0);
		$year = date('Y',$phpdate+0);
		$hr = date('H',$phpdate+0);
		$mn = date('i',$phpdate+0);
		$sc = date('s',$phpdate+0);
	
	
		return "{$year}-{$month}-{$day} {$hr}:{$mn}:{$sc}";
	}
	
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function vardump($var){
		echo '<pre>';
		if(is_a($var,ModelObject)){
			$var->Dump();
		}else{
			var_dump($var);
		}
		 //debug_print_backtrace();
		//$debug = debug_backtrace();
		//echo basename($debug[0]['file'].$debug[1]['function']);
		echo '</pre>';
	}
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function varexport($var){
		return "<pre>".var_export($var,TRUE)."</pre>";
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function vardumpM($obj){
		
		if($obj==NULL)echo "<pre>NULL\r\n</pre>";
		echo '<pre>';
		echo "[".get_class($obj)."]".$obj->Get('id')."\n";
		foreach($obj->GetColumnArrayFull() as $key => $type){
			echo "\t [$key]      ".$obj->Get($key)."\n";
		}
		echo '</pre>';
		
	}
	
	
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function DateMysqlFormat($start, $format="D M,d Y")
	{
		$startPHP = Inc_Var::DateMysqlToPHP($start);
		return self::DatePHPFormat($startPHP,$format);
	}
	public static function DatePHPFormat($datePHP, $format="D M,d Y")
	{
		
/*
 
$datetime = new DateTime('2008-08-03 12:35:23');
echo $datetime->format('Y-m-d H:i:s') . "\n";
$la_time = new DateTimeZone('America/Los_Angeles');
$datetime->setTimezone($la_time);
echo $datetime->format('Y-m-d H:i:s');
*/
		
		
		
		if(Inc_Locale::GetLang()=='zh_CN'){
			//$lc_time = new DateTimeZone('Asia/Shanghai');
			
			switch($format){
				case "D M,d Y":
					//$datetime = new DateTime('@'.$datePHP);
					//$datetime->setTimezone($lc_time);
					//return $datetime->format('Y年m月d日');
					return date('Y年n月j日',$datePHP);
				case "M d, Y";
					//$datetime = new DateTime('@'.$datePHP);
					//$datetime->setTimezone($lc_time);
					//return $datetime->format('Y年m月d日');
					return date('Y年n月j日',$datePHP);
				case "H:i:s M d, Y T";
					//$datetime = new DateTime('@'.$datePHP);
					//$datetime->setTimezone($lc_time);
					//return $datetime->format('H:i:s d.m.Y T');
					return date('H:i:s Y.n.j T',$datePHP);
				case "M d,Y h:i A";
					//$datetime = new DateTime('@'.$datePHP);
					//$datetime->setTimezone($lc_time);
					//return $datetime->format('d.m.Y H:i T');
					return date('Y.n.j H:i T',$datePHP);
				case "H:i:s T";
					//$datetime = new DateTime('@'.$datePHP);
					//$datetime->setTimezone($lc_time);
					//return $datetime->format('H:i:s T');
					return date('H:i:s T',$datePHP);
				case "M d";
					//$datetime = new DateTime('@'.$datePHP);
					//$datetime->setTimezone($lc_time);
					//return $datetime->format('d M');
					return date('n.j',$datePHP);
				case "F j, Y h:iA";
					//$datetime = new DateTime('@'.$datePHP);
					//$datetime->setTimezone($lc_time);
					//return $datetime->format('Y年m月d日 H:i T');
					return date('Y年n月j日 H:i T',$datePHP);
					//M d,Y h:i A
				//H:i:s T
				//M d
			}
		}
		
		
		
		
	   	$date = date($format,$datePHP);
	   	
	   	//if(Inc_Locale::GetLang()!='en_US'){
	   	//	$date = strftime("%c" ,$datePHP );
	   	//}
	   	
		return $date;
	}

	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function DateMysqlToEventTime($start,$end)
	{
		$startPHP = Inc_Var::DateMysqlToPHP($start);
		$endPHP = Inc_Var::DateMysqlToPHP($end);
		
		if($start == $end){
			$date = date(EVENTDATEFORMAT,$startPHP)." ".date(EVENTTIMEFORMAT,$startPHP);
			return $date;
	    }
	
	
		
		$startdate = DateMysql_GetDate($start);
		$enddate = DateMysql_GetDate($end);
	
		
		if($startdate == $enddate)
	    {
	    	$date = date(EVENTDATEFORMAT,$startPHP)." ".date(EVENTTIMEFORMAT,$startPHP).'-'.date(EVENTTIMEFORMAT,$endPHP);
	
	    }else
	    {
	    	$date = date(EVENTDATEFORMAT,$startPHP).' '.date(EVENTTIMEFORMAT,$startPHP).' - '.date(EVENTDATEFORMAT,$endPHP).' '.date(EVENTTIMEFORMAT,$endPHP);
	    }
	
		return $date;
	}
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function DateMysqlToEventShortTime($start,$end)
	{
		$startPHP = Inc_Var::DateMysqlToPHP($start);
		$endPHP = Inc_Var::DateMysqlToPHP($end);
		
		if($start == $end){
			$date = date(EVENTDATEFORMAT,$startPHP)." ".date(EVENTTIMEFORMAT,$startPHP);
			return $date;
	    }
	
	
		
		$startdate = DateMysql_GetDate($start);
		$enddate = DateMysql_GetDate($end);
	
		
		if($startdate == $enddate)
	    {
	    	$date = date(EVENTDATEFORMAT,$startPHP)." ".date(EVENTTIMEFORMAT,$startPHP).'-'.date(EVENTTIMEFORMAT,$endPHP);
	
	    }else
	    {
	    	$date = date(EVENTDATEFORMAT,$startPHP).' - '.date(EVENTDATEFORMAT,$endPHP);
	    }
	
		return $date;
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function arr2set($arr,$delimeter=",") {
		if(is_array($arr) && count($arr)>0) {
			return implode($delimeter,$arr);
		}
		return '';
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function set2arr($set,$delimeter=",") {
		if(is_string($set) && $set != '') {
			return explode($delimeter,$set);
		}
		return array();
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function arr2obj($data) {
	    return is_array($data) ? (object) array_map(__FUNCTION__,$data) : $data;
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function obj2arr($obj) {
		if( !is_object( $object ) && !is_array( $object ) ) {
			return $object;
		}
		if( is_object( $object ) ) {
			$object = get_object_vars( $object );
		}
		return array_map( 'obj2arr', $object );
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function isChecked($val1,$val2) {
		if(!isset($val2)) return false;
		
		if(is_string($val2)) return ($val1 === $val2);
		
		if(is_array($val2) && count($val2) > 0) {
			return in_array($val1,$val2);
		}
		return false;
	}
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function pairstr2Arr($str, $separator='=', $delim=',') {
	    $elems = explode($delim, $str);
	    foreach( $elems as $elem => $val ) {
	        $val = trim($val);
	        $nameVal[] = explode($separator, $val);
			$separateindex = strpos($val,$separator);
			$key = substr($val,0,$separateindex);
			$exactval = substr($val,$separateindex+1);
			$arr[$key] = $exactval;
	    }
	    return $arr;
	}
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function pair_string_to_array($str, $separator='=', $delim=',') {
		return 	Inc_Var::pairstr2Arr($str, $separator, $delim);
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function pairArr2Str($arr, $seperator='=', $delim=',') {
		if(!is_array($arr) || count($arr)==0) {
			return '';
		}
		$piecearray = array();
		foreach($arr as $key => $val) {
			$piecearray[] = $key.$seperator.$val;
		}
		return implode($delim, $piecearray);
	}
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function pair_array_to_string($arr, $separator='=', $delim=',') {
		return 	Inc_Var::pairArr2str($arr, $separator, $delim);
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function ValidateCaptchaText($varname){
		Inc_Var::GetVar($cText,$varname);
		if(md5(strtoupper($cText)) != $_SESSION['captchaText']){
		
			$ipParivar = MD_Pairvar::BuildByNameGroup(Inc_Server::real_ip(),'IPSTORAGE');
			$ipvarAr = Inc_Var::pairstr2Arr($ipParivar->value);
			$isCaptcha = md5(strtoupper($cText)) == $ipvarAr['captchaText'];
			if($isCaptcha){
				$ipParivar->DeleteMe();
			}
			return $isCaptcha;
		}
		return true;	
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function GetRecaptchaCode() {
		require_once(prepath().'../lib/recaptcha-php-1.11/recaptchalib.php');
		$publickey = "6LfU9AkAAAAAAGQvTjHA2a0dBbq4wTnwjBOjUyC_";
		$error = '';
		$use_ssl = Inc_Server::is_https();
		return recaptcha_get_html($publickey,$error,$use_ssl);
	}
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function ValidateRecaptcha() {
		require_once(prepath().'../lib/recaptcha-php-1.11/recaptchalib.php');
		$privatekey = "6LfU9AkAAAAAANj8ohdqRTksMuvvgCd15qlQfxBC";
		$resp = recaptcha_check_answer ($privatekey,
								  $_SERVER["REMOTE_ADDR"],
								  $_POST["recaptcha_challenge_field"],
								  $_POST["recaptcha_response_field"]);
	
		/*if (!$resp->is_valid) {
		  die ("The reCAPTCHA wasn't entered correctly. Go back and try it again." .
			  "(reCAPTCHA said: " . $resp->error . ")");
		}*/
		
		
		return $resp->is_valid;
	}
	/*
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function check_email_address($email) {
	  // First, we check that there's one @ symbol, 
	  // and that the lengths are right.
	  if (!ereg("^[^@]{1,64}@[^@]{1,255}$", $email)) {
	    // Email invalid because wrong number of characters 
	    // in one section or wrong number of @ symbols.
	    return false;
	  }
	  // Split it into sections to make life easier
	  $email_array = explode("@", $email);
	  $local_array = explode(".", $email_array[0]);
	  for ($i = 0; $i < sizeof($local_array); $i++) {
	    if(!ereg("^(([A-Za-z0-9!#$%&'*+/=?^_`{|}~-][A-Za-z0-9!#$%&'*+/=?^_`{|}~\.-]{0,63})|(\"[^(\\|\")]{0,62}\"))$",$local_array[$i])) {
	      return false;
	    }
	  }
	  // Check if domain is IP. If not, 
	  // it should be valid domain name
	  if (!ereg("^\[?[0-9\.]+\]?$", $email_array[1])) {
	    $domain_array = explode(".", $email_array[1]);
	    if (sizeof($domain_array) < 2) {
	        return false; // Not enough parts to domain
	    }
	    for ($i = 0; $i < sizeof($domain_array); $i++) {
	      if(!ereg("^(([A-Za-z0-9][A-Za-z0-9-]{0,61}[A-Za-z0-9])|([A-Za-z0-9]+))$",$domain_array[$i])) {
	        return false;
	      }
	    }
	  }
	  return true;
	}*/
	
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//

	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function ValidateEmail($email) {
		return Inc_Var::validEmail($email);	
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function validEmail($email)
	{
		if(preg_match('/^[\+a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.([a-zA-Z]{2,4})$/', $email) == 0) {
			return false;
		}
		
	   $isValid = true;
	   $atIndex = strrpos($email, "@");
	   if (is_bool($atIndex) && !$atIndex)
	   {
	      $isValid = false;
	   }
	   else
	   {
	      $domain = substr($email, $atIndex+1);
	      $local = substr($email, 0, $atIndex);
	      $localLen = strlen($local);
	      $domainLen = strlen($domain);
	      if ($localLen < 1 || $localLen > 64)
	      {
	         // local part length exceeded
	         $isValid = false;
	      }
	      else if ($domainLen < 1 || $domainLen > 255)
	      {
	         // domain part length exceeded
	         $isValid = false;
	      }
	      else if ($local[0] == '.' || $local[$localLen-1] == '.')
	      {
	         // local part starts or ends with '.'
	         $isValid = false;
	      }
	      else if (preg_match('/\\.\\./', $local))
	      {
	         // local part has two consecutive dots
	         $isValid = false;
	      }
	      else if (!preg_match('/^[A-Za-z0-9\\-\\.]+$/', $domain))
	      {
	         // character not valid in domain part
	         $isValid = false;
	      }
	      else if (preg_match('/\\.\\./', $domain))
	      {
	         // domain part has two consecutive dots
	         $isValid = false;
	      }
	      else if(!preg_match('/^(\\\\.|[A-Za-z0-9!#%&`_=\\/$\'*+?^{}|~.-])+$/',str_replace("\\\\","",$local)))
	      {
	         // character not valid in local part unless 
	         // local part is quoted
	         if (!preg_match('/^"(\\\\"|[^"])+"$/',
	             str_replace("\\\\","",$local)))
	         {
	            $isValid = false;
	         }
	      }
		  
	      if ($isValid && !Conf()->DISABLE_CHECK_EMAIL_DOMAIN && !(checkdnsrr($domain,"MX") || checkdnsrr($domain,"A")))
	      {
	         // domain not found in DNS
	         $isValid = false;
	      }
	   }
	   return $isValid;
	}
	
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function reg_parse($reg,$data,$paramname){
		preg_match_all($reg, $data, $matches);
		$match_index = $paramname;
		$var = array();
		for($i=0;$i<count($matches[0]);$i++){	
			for($j=0;$j<count($match_index);$j++){	
				$var[$i][$match_index[$j]] = $matches[$j][$i];
			}
		}
		return $var;
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function validateIpAddress($ip_addr){
		if(preg_match("/^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/",$ip_addr)){
			$parts=explode(".",$ip_addr);
			foreach($parts as $ip_parts){
				if(intval($ip_parts)>255 || intval($ip_parts)<0) return false;
			}
			return true;
		} else {
			return false;
		}
	}
	/*//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function ValidateURL($url){
		$url = trim($url);
		if($url!=''){
			if(strlen($url)>6){
				$httpval = substr($url,0,7);
				if(strcasecmp($httpval,'https:/')!= 0) {
					if(strcasecmp($httpval,'http://')!= 0) {
						$url = 'http://'.$url;
					}
			
					$wwwval = substr($url,7,4);
					if(strcasecmp($wwwval,'www.')!=0){
						//echo $wwwval;exit;
						$url = 'http://www.'.substr($url,7);
					}
				}		
			}
			else{
				$url = 'http://www.'.$url;
			}
	
		}
		
		return $url;
	}*/
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function ValidateURL($url){
		$url = trim($url);
		if($url == ''){
			return "";
		}	
		if(preg_match("/https?:?\/?\/?\/?$/",$url) != 0){
			return "";
		}	
		if(preg_match("/https?:\/\//",$url) == 0) {
			$url = 'http://'.$url;
		}
		
		$urlArray = @parse_url($url);
		$scheme = $urlArray["scheme"];
		$path = $urlArray["path"];
		$host = $urlArray["host"];
		$query = $urlArray["query"];
		
		$dot_count = preg_match_all("/\./",$host,$matches);
		if($dot_count >= 2) {
			$tmp = explode(".",$host,2);
			$subdomain = $tmp[0];
			$maindomain = $tmp[1];
		} else if($dot_count == 1) {
			$tmp = explode(".",$host);
			$subdomain = "";
			$maindomain = $tmp[0].".".$tmp[1];
		} else{
			$subdomain = "www";
			$maindomain = $host;
		}
		
		if($query!=''){
			$query = "?".$query;
		}
		if($subdomain==''){
			return "{$scheme}://{$maindomain}{$path}{$query}";
		}
		return "{$scheme}://{$subdomain}.{$maindomain}{$path}{$query}";
	}
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function strtofupper($str){
	    $str = explode(' ', $str);
		$str2 = array();
	    for($i = 0; $i < count($str); $i++){
			if($str[$i]=="")continue;
	        $str2[$i] = strtoupper(substr($str[$i], 0, 1)) . substr($str[$i], 1);
	    }
	    return implode('-', $str2);
	}
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function strtocamel($str){
	    $str = explode(' ', strtolower($str));
	    for($i = 1; $i < count($str); $i++){
	        $str[$i] = strtoupper(substr($str[$i], 0, 1)) . substr($str[$i], 1);
	    }
	    return implode('', $str);
	}
	
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function week_of_year($time) {
	 	$month = date('m',$time);
	  	$day = date('d',$time);
	   	$year = date('Y',$time);
		$day_of_year = date('z', mktime(0, 0, 0, $month, $day, $year));
		
		/* Days in the week before Jan 1. If you want weeks to start on Monday make this (x + 6) % 7 */
		$days_before_year = date('w', mktime(0, 0, 0, 1, 1, $year));
		
		$days_left_in_week = 7 - date('w', mktime(0, 0, 0, $month, $day, $year));
		
		/* find the number of weeks by adding the days in the week before the start of the year, days up to $day, and the days left in this week, then divide by 7 */
		return ($days_before_year + $day_of_year + $days_left_in_week) / 7;
	
	} 
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function globalvars(){
	    $result=array();
	    $skip=array('GLOBALS','_ENV','HTTP_ENV_VARS',
	                        '_POST','HTTP_POST_VARS','_GET',
	                        'HTTP_GET_VARS',
	                        '_COOKIE',
	                        'HTTP_COOKIE_VARS','_SERVER',
	                        'HTTP_SERVER_VARS',
	                        '_FILES','HTTP_POST_FILES',
	                        '_REQUEST','HTTP_SESSION_VARS',
	                        '_SESSION');
	    foreach($GLOBALS as $k=>$v)
	        if(!in_array($k,$skip))
	            $result[$k]=$v;
	    return $result;
	}//functionglobalvars
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function CheckMemory($msg=""){
		return;
		Inc_Htmlutil::FlushOB("<br>{$msg} Mem[".number_format(memory_get_usage(TRUE)/1024/1024,2)."M][".round(memory_get_usage(TRUE)/1024)."K] <br>");
	}
	public static function Processing($message="# ", $current=0, $max=100){
		if(!Conf()->DISABLE_PROCESSING_MESSAGE) {
			Inc_Htmlutil::FlushOB(str_replace("{PERCENT}","[".sprintf("%3s",floor($current/$max*100))."%]",$message), TRUE);
		}
	}
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function ParseBoolean($bool) {
		return ($bool==="FALSE" || $bool==="false") ? false : (bool) $bool;	
	}
	
	public static function RemoveFromArrayByValue($array, $val = '', $preserve_keys = true) {
		if (empty($array) || !is_array($array)) return false;
		if (!in_array($val, $array)) return $array;
	
		foreach($array as $key => $value) {
			if ($value == $val) unset($array[$key]);
		}
	
		return ($preserve_keys === true) ? $array : array_values($array);
	}
	
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	public static function encyptQuote($data){
		$data = str_replace("%","%25",$data);
		$data = str_replace("'","%27",$data);
		$data = str_replace('"',"%22",$data);
		return $data;
	}
	public static function decyptQuote($data){
		$data = str_replace("%27","'",$data);
		$data = str_replace('%22','"',$data);
		$data = str_replace("%25","%",$data);
		return $data;
	}
	
	
	function right($string,$chars) 
	{ 
		$vright = substr($string, strlen($string)-$chars,$chars); 
		return $vright; 
		
	} 	
	
	function escape_regex_for_string($str)
	{
		//All regex special chars (according to arkani at iol dot pt below):
		// \ ^ . $ | ( ) [ ]
		// * + ? { } ,
		$patterns = array('/\//', '/\^/', '/\./', '/\$/', '/\|/',	 '/\(/', '/\)/', '/\[/', '/\]/', '/\*/', '/\+/',	'/\?/', '/\{/', '/\}/', '/\,/');
		$replace = array('\/', '\^', '\.', '\$', '\|', '\(', '\)',	'\[', '\]', '\*', '\+', '\?', '\{', '\}', '\,');
		 
		$str = str_replace($patterns,$replace, $str);
	}
	
	function escape_string_for_regex($str)
	{
		//All regex special chars (according to arkani at iol dot pt below):
		// \ ^ . $ | ( ) [ ]
		// * + ? { } ,
		$search  = array('/'  , '^',  '.' , '$',  '|',  '(',  ')',	 '[',  ']',  '*',  '+',  '?',  '{',  '}',  ',');
		$replace = array('\/', '\^', '\.', '\$', '\|', '\(', '\)',	'\[', '\]', '\*', '\+', '\?', '\{', '\}', '\,');
		
			
		$str = str_replace($search,$replace, $str);
		return $str;
	}	
	
	
	//
	//
	//
	//
	//
	// DO NOT EDIT THIS FILE WHILE REWRITE DEVELOPMENT PLEASE EDIT IN /tmp/include_src 
	//
	//
	//
	//
	//
	static function stringToHex ($s) {
	  $r = "0x";
	  $hexes = array ("0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f");
	  for ($i=0; $i<strlen($s); $i++) {$r .= ($hexes [(ord($s{$i}) >> 4)] . $hexes [(ord($s{$i}) & 0xf)]);}
	  return $r;
	}

	static function hexToString ($h) {
	  $r = "";
	  for ($i= (substr($h, 0, 2)=="0x")?2:0; $i<strlen($h); $i+=2) {$r .= chr (base_convert (substr ($h, $i, 2), 16, 10));}
	  return $r;
	}
	
	public static function safeSerialize($data){
	
		$fb_str = json_encode($data);
		//$fb_gz = gzcompress($fb_enc);
		$fb_hex = Inc_Var::stringToHex($fb_str);
		$fb_64 = Inc_Secur::custombase_convert_big($fb_hex, 'HEX', 'BASE62');
	
		return $fb_64;
	}
	
	public static function safeUnserialize($string){
	
		$fb_hex = Inc_Secur::custombase_convert_big($string, 'BASE62', 'HEX');
		$fb_enc = Inc_Var::hexToString($fb_hex);
		//$fb_enc = gzuncompress($fb_gz);
		$data = json_decode($fb_enc,true);
	
		return $data;
	}	
	
	function url_addparameter($url,$extravar) {
		$parselocation = parse_url($url);
		
		if($parselocation['query']==NULL){
			$parselocation['query'] = $extravar;
		}else{
			$parselocation['query'] .="&".$extravar;
		}
			
		$url = Inc_Var::unparse_url($parselocation);
		//Inc_Var::vardump($url);
		return $url;
	}
	
	function unparse_url($parsed_url) {
		$scheme   = isset($parsed_url['scheme']) ? $parsed_url['scheme'] . '://' : '';
		$host     = isset($parsed_url['host']) ? $parsed_url['host'] : '';
		$port     = isset($parsed_url['port']) ? ':' . $parsed_url['port'] : '';
		$user     = isset($parsed_url['user']) ? $parsed_url['user'] : '';
		$pass     = isset($parsed_url['pass']) ? ':' . $parsed_url['pass']  : '';
		$pass     = ($user || $pass) ? "$pass@" : '';
		$path     = isset($parsed_url['path']) ? $parsed_url['path'] : '';
		$query    = isset($parsed_url['query']) ? '?' . $parsed_url['query'] : '';
		$fragment = isset($parsed_url['fragment']) ? '#' . $parsed_url['fragment'] : '';
		return "$scheme$user$pass$host$port$path$query$fragment";
	}
	
	public static function recursive_ksort(&$arr) {
		ksort($arr);
		foreach ($arr as &$a) {
			if (is_array($a) && !empty($a)) {
				Inc_Var::recursive_ksort($a);
			}
		}
	}
	
	public static function array_unique_merge() { 
       return array_unique(call_user_func_array('array_merge', func_get_args())); 
	}
	
}
